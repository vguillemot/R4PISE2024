---
title: "Multiple Factor Analysis on Wines"
format:
  html:
    code-fold: true
    code-summary: "R code"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  echo = TRUE, 
  # dev = "svg",
  # fig.ext = "svg", 
  fig.width = 7, 
  fig.height = 7
)
```

<<<<<<< HEAD
# Prolegomena

We will need the following libraries
for this example, if these are not installed
install them with `remotes` or `pak`
```{r libraries, include=TRUE}
# de-comment the following lines to
# install missing packages
#install.packages("pak")
=======

```{r libraries, include=TRUE}
# You will need the following libraries
# for this example, if these are not installed
# install them with `remotes`, `pak`

# de-comment the following lines to
# install missing packages
# install.packages("pak")
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2
# pak::pak('dplyr')
library(dplyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(TExPosition)
#pak::pak('HerveAbdi/data4PCCAR')
library(data4PCCAR)
#pak::pak('HerveAbdi/PTCA4CATA')
library(FactoMineR)
suppressMessages(library(factoextra))
#pak::pak('gastonstat/colortools')
library(colortools)
library(coin)
<<<<<<< HEAD
suppressMessages(library(XLConnect))

```


# How to run an MFA


`FactoMineR` is the
 standard *R*-package for running MFA.
 As the name indicates,
 the function `FactoMineR::MFA`
 will run the MFA.
 


# The Data

The illustrative (albeit fictitious)  
data used for this example
come from a chapter 
by Hervé Abdi and Dominique
Valentin: 
Multiple factor analysis. 
In N.J. Salkind (Ed.): 
*Encyclopedia of Measurement and Statistics*. 
Thousand Oaks (CA): Sage. pp. 657—663.
This chapter can be downloaded 
from the home page of Hervé Abdi:
`https://personal.utdallas.edu/~herve/`
(look for number C40) or
directly as
`https://personal.utdallas.edu/~herve/Abdi-MFA2007-pretty.pdf`.

As long as you are there, you can also have a 
look at:

`https://personal.utdallas.edu/~herve/abdi-WiresCS-mfa-2013.pdf`
This data set is part of the `ExPosition` package

In this example, three different assessors
(named e1, e2, and e3)
evaluated 6 wines using their own descriptors.

=======
# suppressMessages(library(XLConnect))
library(dplyr)
library(ggplot2)
library(tidyr)
library(FactoMineR)
library(factoextra)
```

We illustrate MFA with the [6 wines and 3 assessors data-set](A_Data.qmd#second-data-set). In this example, three different assessors
(named e1, e2, and e3)
evaluated 6 wines using their own descriptors.

>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2
```{r data}
data('wines2007', package = "ExPosition")
# your data (a concatenated data tables)
# Have a look
<<<<<<< HEAD
wines2007$data.
=======
wines2007$data
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2
# a data frame with one row that specifies the table membership of each column of `wines2007$data`
# run mfa
group4MFA <- summary(as.factor(t(wines2007$table)))
name.group4MFA <- names(summary(as.factor(t(wines2007$table))))
resMFA <- FactoMineR::MFA(wines2007$data, # data table
                          group = group4MFA,
                          name.group = name.group4MFA,
                          graph = FALSE)
<<<<<<< HEAD
```

## Where are the results you need:

The list `resMFA` contains all the informtion 
needed to interpret the results of the analysis.




### The $\mathbf{R_v}$ coefficient matrix

```{r Rv}
resMFA$group$RV
# a nice heatmap
col <- colorRampPalette(
  c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")
  )
plot.RV <- corrplot::corrplot(resMFA$group$RV, 
                           method = "color",
                           col = col(201), 
                           addCoef.col = "black", 
                           number.cex = 0.8, 
                           tl.col = "black", 
                           mar = c(0,0,0,0),
                           addgrid.col = "grey", 
                           tl.srt = 50)
print(plot.RV)
```
 
A first step is to look at the $R_V$ matrix---A
matrix that stores 
  the values of the $R_v$
 coefficient between pairs of the original data tables
 (adn also with the whole MFA).
 
 For MFA, these coefficients are only descriptive
 and can be interpreted like a squared coefficient of
 correlation for matrices: a value close to 1 for a pair
 of data tables
 indicates that these two tables are
 storing similar information, a value close
 to zero indicates that these tables
 store independent information.
 
<!-- HeatMap around here -->

 

#### Weights (alpha in the paper) applied to each data table

You can show the alphas with a barplot 

```{r alpha}
#Eig.tab <- demo.mfa.2007$mexPosition.Data$Compromise$compromise.eigs
Eig.tab <- c(resMFA$separate.analyses$E1$eig[1],
             resMFA$separate.analyses$E1$eig[2],
             resMFA$separate.analyses$E1$eig[3])
Alpha <- 1/sqrt(Eig.tab)
```

### Main results:




=======
# The list `resMFA` contains all the information 
# needed to interpret the results of the analysis.
```


## The $\mathbf{R_v}$ coefficient matrix

A first step is to look at the $R_V$ matrix---A
 matrix that stores the values of the $R_v$
 coefficient between pairs of the original data tables
 (and also with the whole MFA).
 
For MFA, these coefficients are only descriptive
 and can be interpreted like a squared coefficient of
 correlation for matrices: a value close to 1 for a pair
 of data tables
 indicates that these two tables are
 storing similar information, a value close
 to zero indicates that these tables
 store independent information.
 
```{r Rv, fig.height = 5, fig.width = 5}
# a nice heatmap
resMFA$group$RV %>%
  as_tibble(rownames = "rows") %>%
  pivot_longer(-1, names_to = "cols") %>%
    mutate(
      cols = factor(cols, levels = rev(unique(cols)))) %>%
  ggplot(aes(x = rows, y = cols)) +
  geom_tile(aes(fill = value)) +  
  geom_text(aes(label = round(value, 2)), color = "white", fontface = "bold") +  
  scale_fill_gradient2(low = "#BB4444", mid =  "#FFFFFF", high = "#4477AA", midpoint = 0, limits = c(-1, 1 + 1e-10)) +
  coord_equal() + 
  scale_x_discrete(position = "top") +
  labs(x = "", y = "", fill) +
  theme_minimal() + 
  # theme(text = element_text())
  geom_hline(yintercept = 1.5, color = "white") + 
  geom_vline(xintercept = 3.5, color = "white")


# col <- colorRampPalette(
#   c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")
#   )
# plot.RV <- corrplot::corrplot(resMFA$group$RV, 
#                            method = "color",
#                            col = col(201), 
#                            addCoef.col = "black", 
#                            number.cex = 0.8, 
#                            tl.col = "black", 
#                            mar = c(0,0,0,0),
#                            addgrid.col = "grey", 
#                            tl.srt = 90)
# print(plot.RV)
```
 
 

## Weights (alpha in the paper) applied to each data table

You can show the alphas ($\boldsymbol{\alpha}$) with a barplot.

```{r alpha}
#Eig.tab <- demo.mfa.2007$mexPosition.Data$Compromise$compromise.eigs
Eig.tab <- c(resMFA$separate.analyses$E1$eig[1],
             resMFA$separate.analyses$E1$eig[2],
             resMFA$separate.analyses$E1$eig[3])
Alpha <- 1/sqrt(Eig.tab)

tibble(Assessor = paste0("E", 1:3),
       Alpha = Alpha) %>%
  ggplot(aes(Assessor, Alpha, fill = Assessor)) + 
  geom_col(show.legend = FALSE) + 
  theme_bw() + 
  labs(y = "", title = "Weight applied to each table")

```

## Scree-plot

>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2
```{r eig}
#Eig4scree <- demo.mfa.2007$mexPosition.Data$Table$eigs
Eig4scree <- resMFA$global.pca$eig[,1]
Tau4scree <- resMFA$global.pca$eig[,2]
# Use factorextra
# Eigenvalues/variances of dimensions
fviz_screeplot(resMFA)
```



<<<<<<< HEAD
#### Global factor scores of the rows: 
=======
## Global factor scores of the rows: 
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2

This shows how the rows are projected 
onto the space from the point of all tables

(You want to plot them like how you plot them in PCA:
Component 1 vs. Component 2)

```{r fi.table}
fi <- resMFA$global.pca$ind$coord
fviz_mfa_ind(resMFA, col.ind = "cos2",
  gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
  repel = TRUE)
```

<<<<<<< HEAD
#### Partial factor scores of the rows: how the rows are viewed from the persepctive of each table
=======
## Partial factor scores of the rows: how the rows are viewed from the persepctive of each table
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2

(You want to plot them with the global factor scores. 
Please check out the example of DiSTATIS to see how you plot them.)

```{r pfi}
# Partial individuals
fviz_mfa_ind(resMFA, partial = "all")
```

<<<<<<< HEAD
#### Loadings of variables
=======
## Loadings of variables
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2

(You interpret them as in PCA.)

```{r q}
# Quantitative variables
fviz_mfa_var(resMFA, "quanti.var", palette = "jco", 
             repel = TRUE)
```

<<<<<<< HEAD
#### Contributions

Left as an exercise.

=======
## Contributions

Left as an exercise.

## Bonus for R users: How to run an MFA

`FactoMineR` is the
standard *R*-package for running MFA.
As the name indicates,
the function `FactoMineR::MFA`
will run the MFA.
 
>>>>>>> 114d49af75e6f643804eb6aa267387ef71ae50a2

